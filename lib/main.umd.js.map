{"version":3,"file":"main.umd.js","sources":["../src/main.ts"],"sourcesContent":["type LocalStorageItem = {\r\n    data: any,\r\n    expiry: number | null\r\n};\r\n\r\nexport class LocalStorage {\r\n    /**\r\n     * Default item validity period in seconds.\r\n     *\r\n     * @type { number | null }\r\n     */\r\n    private static _ttl: number | null = null;\r\n\r\n    /**\r\n     * Set the default item validity period in seconds.\r\n     *\r\n     * @param {number | null } value\r\n     */\r\n    static ttl(value: number | null) {\r\n        LocalStorage._ttl = value;\r\n    }\r\n\r\n    /**\r\n     * Set the key to the Storage object.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to create.\r\n     * @param { * } value Value you want to give the key you are creating.\r\n     * @param { number|null } ttl Item validity period in seconds.\r\n     */\r\n    static set(key: string, value: any, ttl: number | null = null): void {\r\n        ttl = ttl ?? LocalStorage._ttl;\r\n\r\n        const item: LocalStorageItem = {\r\n            data  : value instanceof Function ? value() : value,\r\n            expiry: ttl ? Date.now() + ttl * 1000 : null\r\n        };\r\n\r\n        localStorage.setItem(key, JSON.stringify(item));\r\n    }\r\n\r\n    /**\r\n     * Get the key from the Storage object.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to create.\r\n     * @param { string | Function | null } fallback String containing the fallback value.\r\n     *\r\n     * @return { * }\r\n     */\r\n    static get(key: string, fallback: string | Function | null = null): any {\r\n        const storageItem: string | null = localStorage.getItem(key);\r\n\r\n        if (storageItem === null) {\r\n            return fallback instanceof Function ? fallback() : fallback ?? null;\r\n        }\r\n\r\n        try {\r\n            const item: LocalStorageItem = JSON.parse(storageItem);\r\n\r\n            if (item.expiry && Date.now() > item.expiry) {\r\n                LocalStorage.remove(key);\r\n\r\n                return null;\r\n            }\r\n\r\n            return item.data ?? item;\r\n        } catch (error) {\r\n            return storageItem;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the key from the Storage, or execute the given callback and store the result.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to create.\r\n     * @param { Function } callback Function you want to execute.\r\n     * @param { number | null } ttl Item validity period in seconds.\r\n     *\r\n     * @return { any }\r\n     */\r\n    static remember(key: string, callback: Function, ttl: number | null = null): any {\r\n        const item: string | null = LocalStorage.get(key);\r\n\r\n        if (item === null) {\r\n            LocalStorage.set(key, callback, ttl ?? LocalStorage._ttl);\r\n        }\r\n\r\n        return item ?? LocalStorage.get(key);\r\n    }\r\n\r\n    /**\r\n     * Retrieves all items from the Storage object.\r\n     *\r\n     * @return { object }\r\n     */\r\n    static all(): object {\r\n        const storage: object | any = { ...localStorage };\r\n\r\n        for (const item in storage) {\r\n            storage[item] = LocalStorage.get(item);\r\n        }\r\n\r\n        return storage;\r\n    }\r\n\r\n    /**\r\n     * Remove the key from the Storage object.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to delete.\r\n     */\r\n    static remove(key: string): void {\r\n        localStorage.removeItem(key);\r\n    }\r\n\r\n    /**\r\n     * Clear all keys stored in a given Storage object.\r\n     */\r\n    static clear(): void {\r\n        localStorage.clear();\r\n    }\r\n\r\n    /**\r\n     * Determine if the key exists in the Storage object.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to check against\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static has(key: string): boolean {\r\n        return !!LocalStorage.get(key);\r\n    }\r\n\r\n    /**\r\n     * Determine if any of the keys exists in the Storage object.\r\n     *\r\n     * @param { string | array } keys String containing the name of the key you want to check against\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static hasAny(keys: string | string[]): boolean {\r\n        keys = keys instanceof Array ? keys : [...arguments];\r\n\r\n        return keys.filter((key: string) => LocalStorage.has(key)).length > 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the Storage object is empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isEmpty(): boolean {\r\n        return Object.keys(LocalStorage.all()).length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the Storage object is not empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isNotEmpty(): boolean {\r\n        return !LocalStorage.isEmpty();\r\n    }\r\n\r\n    /**\r\n     * Retrieves all keys from the Storage object.\r\n     *\r\n     * @return { array }\r\n     */\r\n    static keys(): string[] {\r\n        return Object.keys(localStorage);\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of items in the Storage object.\r\n     *\r\n     * @return { number }\r\n     */\r\n    static count(): number {\r\n        return localStorage.length;\r\n    }\r\n\r\n    /**\r\n     * Updates the item expiration time.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to update.\r\n     * @param { number | null } ttl Item validity period in seconds.\r\n     */\r\n    static touch(key: string, ttl: number | null = null): void {\r\n        const item = LocalStorage.get(key);\r\n\r\n        if (item === null) {\r\n            return;\r\n        }\r\n\r\n        LocalStorage.set(key, item, ttl ?? LocalStorage._ttl);\r\n    }\r\n\r\n    /**\r\n     * Returns the expiration date for a given key.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to check against\r\n     * @param { boolean } asDate If true, returns the expiration date as a Date object.\r\n     *\r\n     * @return { number | Date | null }\r\n     */\r\n    static expiry(key: string, asDate: boolean = false): number | Date | null {\r\n        const storageItem: string | null = localStorage.getItem(key);\r\n\r\n        if (storageItem === null) {\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            const item: LocalStorageItem | null = JSON.parse(storageItem);\r\n\r\n            if (!item?.hasOwnProperty('expiry') || item?.expiry === null) {\r\n                return null;\r\n            }\r\n\r\n            return asDate ? new Date(item.expiry) : item.expiry;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dump the key from the Storage object.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to dump.\r\n     */\r\n    static dump(key: string): void {\r\n        console.log(LocalStorage.get(key));\r\n    }\r\n}\r\n\r\nif (typeof window !== 'undefined') {\r\n    (window as any).LocalStorage = LocalStorage;\r\n}\r\n\r\nif (typeof global !== 'undefined') {\r\n    (global as any).LocalStorage = LocalStorage;\r\n}"],"names":[],"mappings":"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"}