{"version":3,"file":"main.min.js","sources":["../src/main.ts"],"sourcesContent":["type LocalStorageItem = {\r\n    data: any,\r\n    expiry: number | null\r\n};\r\n\r\nexport class LocalStorage {\r\n    /**\r\n     * Default item validity period in seconds.\r\n     *\r\n     * @type { number | null }\r\n     */\r\n    private static _ttl: number | null = null;\r\n\r\n    /**\r\n     * Set the default item validity period in seconds.\r\n     *\r\n     * @param {number | null } value\r\n     */\r\n    static ttl(value: number | null) {\r\n        LocalStorage._ttl = value;\r\n    }\r\n\r\n    /**\r\n     * Set the key to the Storage object.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to create.\r\n     * @param { * } value Value you want to give the key you are creating.\r\n     * @param { number|null } ttl Item validity period in seconds.\r\n     */\r\n    static set(key: string, value: any, ttl: number | null = null): void {\r\n        ttl = ttl ?? LocalStorage._ttl;\r\n\r\n        const item: LocalStorageItem = {\r\n            data  : value instanceof Function ? value() : value,\r\n            expiry: ttl ? Date.now() + ttl * 1000 : null\r\n        };\r\n\r\n        localStorage.setItem(key, JSON.stringify(item));\r\n    }\r\n\r\n    /**\r\n     * Get the key from the Storage object.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to create.\r\n     * @param { string | Function | null } fallback String containing the fallback value.\r\n     *\r\n     * @return { * }\r\n     */\r\n    static get(key: string, fallback: string | Function | null = null): any {\r\n        const storageItem: string | null = localStorage.getItem(key);\r\n\r\n        if (storageItem === null) {\r\n            return fallback instanceof Function ? fallback() : fallback ?? null;\r\n        }\r\n\r\n        try {\r\n            const item: LocalStorageItem = JSON.parse(storageItem);\r\n\r\n            if (item.expiry && Date.now() > item.expiry) {\r\n                LocalStorage.remove(key);\r\n\r\n                return null;\r\n            }\r\n\r\n            return item.data ?? item;\r\n        } catch (error) {\r\n            return storageItem;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the key from the Storage, or execute the given callback and store the result.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to create.\r\n     * @param { Function } callback Function you want to execute.\r\n     * @param { number | null } ttl Item validity period in seconds.\r\n     *\r\n     * @return { any }\r\n     */\r\n    static remember(key: string, callback: Function, ttl: number | null = null): any {\r\n        const item: string | null = LocalStorage.get(key);\r\n\r\n        if (item === null) {\r\n            LocalStorage.set(key, callback, ttl ?? LocalStorage._ttl);\r\n        }\r\n\r\n        return item ?? LocalStorage.get(key);\r\n    }\r\n\r\n    /**\r\n     * Retrieves all items from the Storage object.\r\n     *\r\n     * @return { object }\r\n     */\r\n    static all(): object {\r\n        const storage: object | any = { ...localStorage };\r\n\r\n        for (const item in storage) {\r\n            storage[item] = LocalStorage.get(item);\r\n        }\r\n\r\n        return storage;\r\n    }\r\n\r\n    /**\r\n     * Remove the key from the Storage object.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to delete.\r\n     */\r\n    static remove(key: string): void {\r\n        localStorage.removeItem(key);\r\n    }\r\n\r\n    /**\r\n     * Clear all keys stored in a given Storage object.\r\n     */\r\n    static clear(): void {\r\n        localStorage.clear();\r\n    }\r\n\r\n    /**\r\n     * Determine if the key exists in the Storage object.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to check against\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static has(key: string): boolean {\r\n        return !!LocalStorage.get(key);\r\n    }\r\n\r\n    /**\r\n     * Determine if any of the keys exists in the Storage object.\r\n     *\r\n     * @param { string | array } keys String containing the name of the key you want to check against\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static hasAny(keys: string | string[]): boolean {\r\n        keys = keys instanceof Array ? keys : [...arguments];\r\n\r\n        return keys.filter((key: string) => LocalStorage.has(key)).length > 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the Storage object is empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isEmpty(): boolean {\r\n        return Object.keys(LocalStorage.all()).length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the Storage object is not empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isNotEmpty(): boolean {\r\n        return !LocalStorage.isEmpty();\r\n    }\r\n\r\n    /**\r\n     * Retrieves all keys from the Storage object.\r\n     *\r\n     * @return { array }\r\n     */\r\n    static keys(): string[] {\r\n        return Object.keys(localStorage);\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of items in the Storage object.\r\n     *\r\n     * @return { number }\r\n     */\r\n    static count(): number {\r\n        return localStorage.length;\r\n    }\r\n\r\n    /**\r\n     * Updates the item expiration time.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to update.\r\n     * @param { number | null } ttl Item validity period in seconds.\r\n     */\r\n    static touch(key: string, ttl: number | null = null): void {\r\n        const item = LocalStorage.get(key);\r\n\r\n        if (item === null) {\r\n            return;\r\n        }\r\n\r\n        LocalStorage.set(key, item, ttl ?? LocalStorage._ttl);\r\n    }\r\n\r\n    /**\r\n     * Returns the expiration date for a given key.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to check against\r\n     * @param { boolean } asDate If true, returns the expiration date as a Date object.\r\n     *\r\n     * @return { number | Date | null }\r\n     */\r\n    static expiry(key: string, asDate: boolean = false): number | Date | null {\r\n        const storageItem: string | null = localStorage.getItem(key);\r\n\r\n        if (storageItem === null) {\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            const item: LocalStorageItem | null = JSON.parse(storageItem);\r\n\r\n            if (!item?.hasOwnProperty('expiry') || item?.expiry === null) {\r\n                return null;\r\n            }\r\n\r\n            return asDate ? new Date(item.expiry) : item.expiry;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dump the key from the Storage object.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to dump.\r\n     */\r\n    static dump(key: string): void {\r\n        console.log(LocalStorage.get(key));\r\n    }\r\n}\r\n\r\nif (typeof window !== 'undefined') {\r\n    (window as any).LocalStorage = LocalStorage;\r\n}\r\n\r\nif (typeof global !== 'undefined') {\r\n    (global as any).LocalStorage = LocalStorage;\r\n}"],"names":["LocalStorage","ttl","value","_ttl","set","key","item","data","Function","expiry","Date","now","localStorage","setItem","JSON","stringify","get","fallback","storageItem","getItem","parse","remove","_a","error","remember","callback","all","storage","Object","assign","removeItem","clear","has","hasAny","keys","Array","arguments","filter","length","isEmpty","isNotEmpty","count","touch","asDate","hasOwnProperty","dump","console","log","defineProperty","window","global"],"mappings":"yPAKaA,EAaT,UAAOC,CAAIC,GACPF,EAAaG,KAAOD,EAUxB,UAAOE,CAAIC,EAAaH,EAAYD,EAAqB,MACrDA,EAAMA,QAAAA,EAAOD,EAAaG,KAE1B,MAAMG,EAAyB,CAC3BC,KAAQL,aAAiBM,SAAWN,IAAUA,EAC9CO,OAAQR,EAAMS,KAAKC,MAAc,IAANV,EAAa,MAG5CW,aAAaC,QAAQR,EAAKS,KAAKC,UAAUT,IAW7C,UAAOU,CAAIX,EAAaY,EAAqC,YACzD,MAAMC,EAA6BN,aAAaO,QAAQd,GAExD,GAAoB,OAAhBa,EACA,OAAOD,aAAoBT,SAAWS,IAAaA,QAAAA,EAAY,KAGnE,IACI,MAAMX,EAAyBQ,KAAKM,MAAMF,GAE1C,OAAIZ,EAAKG,QAAUC,KAAKC,MAAQL,EAAKG,QACjCT,EAAaqB,OAAOhB,GAEb,MAGK,UAATC,EAAKC,YAAI,IAAAe,EAAAA,EAAIhB,EACtB,MAAOiB,GACL,OAAOL,GAaf,eAAOM,CAASnB,EAAaoB,EAAoBxB,EAAqB,MAClE,MAAMK,EAAsBN,EAAagB,IAAIX,GAM7C,OAJa,OAATC,GACAN,EAAaI,IAAIC,EAAKoB,EAAUxB,QAAAA,EAAOD,EAAaG,MAGjDG,QAAAA,EAAQN,EAAagB,IAAIX,GAQpC,UAAOqB,GACH,MAAMC,EAAOC,OAAAC,OAAA,CAAA,EAAsBjB,cAEnC,IAAK,MAAMN,KAAQqB,EACfA,EAAQrB,GAAQN,EAAagB,IAAIV,GAGrC,OAAOqB,EAQX,aAAON,CAAOhB,GACVO,aAAakB,WAAWzB,GAM5B,YAAO0B,GACHnB,aAAamB,QAUjB,UAAOC,CAAI3B,GACP,QAASL,EAAagB,IAAIX,GAU9B,aAAO4B,CAAOC,GAGV,OAFAA,EAAOA,aAAgBC,MAAQD,EAAO,IAAIE,YAE9BC,OAAQhC,GAAgBL,EAAagC,IAAI3B,IAAMiC,OAAS,EAQxE,cAAOC,GACH,OAAkD,IAA3CX,OAAOM,KAAKlC,EAAa0B,OAAOY,OAQ3C,iBAAOE,GACH,OAAQxC,EAAauC,UAQzB,WAAOL,GACH,OAAON,OAAOM,KAAKtB,cAQvB,YAAO6B,GACH,OAAO7B,aAAa0B,OASxB,YAAOI,CAAMrC,EAAaJ,EAAqB,MAC3C,MAAMK,EAAON,EAAagB,IAAIX,GAEjB,OAATC,GAIJN,EAAaI,IAAIC,EAAKC,EAAML,QAAAA,EAAOD,EAAaG,MAWpD,aAAOM,CAAOJ,EAAasC,GAAkB,GACzC,MAAMzB,EAA6BN,aAAaO,QAAQd,GAExD,GAAoB,OAAhBa,EACA,OAAO,KAGX,IACI,MAAMZ,EAAgCQ,KAAKM,MAAMF,GAEjD,OAAKZ,eAAAA,EAAMsC,eAAe,YAA8B,QAAjBtC,aAAI,EAAJA,EAAMG,QAItCkC,EAAS,IAAIjC,KAAKJ,EAAKG,QAAUH,EAAKG,OAHlC,KAIb,MAAOc,GACL,OAAO,MASf,WAAOsB,CAAKxC,GACRyC,QAAQC,IAAI/C,EAAagB,IAAIX,KA3NlBuB,OAAAoB,eAAAhD,EAAA,OAAA,iDAAsB,OA+NnB,oBAAXiD,SACNA,OAAejD,aAAeA,GAGb,oBAAXkD,SACNA,OAAelD,aAAeA"}